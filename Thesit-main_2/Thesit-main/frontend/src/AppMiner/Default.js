import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../CSS/Default.css';
import { fetchPages, connectFacebook, saveMessageToDB, getMessagesByPageId, deleteMessageFromDB } from "../Features/Tool";

function SetDefault() {
  const [pages, setPages] = useState([]);
  const [selectedPage, setSelectedPage] = useState("");
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(false);
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠
  const [mediaFiles, setMediaFiles] = useState({
    videos: [],
    images1: [],
    images2: []
  });

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    const loadPages = async () => {
      try {
        const pagesData = await fetchPages();
        setPages(pagesData);
        
        // ‡πÇ‡∏´‡∏•‡∏î selectedPage ‡∏à‡∏≤‡∏Å localStorage
        const savedPage = localStorage.getItem("selectedPage");
        if (savedPage && pagesData.some(page => page.id === savedPage)) {
          setSelectedPage(savedPage);
        }
      } catch (err) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ:", err);
      }
    };
    
    loadPages();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô selectedPage
  useEffect(() => {
    const loadMessages = async () => {
      if (selectedPage) {
        setLoading(true);
        try {
          console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: ${selectedPage}`);
          const data = await getMessagesByPageId(selectedPage);
          console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, data);
          setMessages(Array.isArray(data) ? data : []);
        } catch (err) {
          console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
          setMessages([]);
        } finally {
          setLoading(false);
        }
      } else {
        setMessages([]);
      }
    };

    loadMessages();
  }, [selectedPage]);

  const handlePageChange = (e) => {
    const pageId = e.target.value;
    console.log(`üìÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏à‡πÄ‡∏õ‡πá‡∏ô: ${pageId}`);
    setSelectedPage(pageId);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å selectedPage ‡∏•‡∏á localStorage
    if (pageId) {
      localStorage.setItem("selectedPage", pageId);
    } else {
      localStorage.removeItem("selectedPage");
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠
    setNewMessage("");
    setMediaFiles({
      videos: [],
      images1: [],
      images2: []
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠
  const handleFileUpload = (event, mediaType) => {
    const files = Array.from(event.target.files);
    const fileData = files.map(file => ({
      file,
      preview: URL.createObjectURL(file),
      name: file.name,
      type: file.type,
      size: file.size
    }));

    setMediaFiles(prev => ({
      ...prev,
      [mediaType]: [...prev[mediaType], ...fileData]
    }));
  };

  const removeMediaFile = (mediaType, index) => {
    setMediaFiles(prev => {
      const newFiles = [...prev[mediaType]];
      // ‡∏•‡∏ö URL object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
      URL.revokeObjectURL(newFiles[index].preview);
      newFiles.splice(index, 1);
      return {
        ...prev,
        [mediaType]: newFiles
      };
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô base64
  const convertFileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const prepareMediaData = async () => {
    const mediaData = {
      videos: [],
      images1: [],
      images2: []
    };

    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏õ‡πá‡∏ô base64
      for (const video of mediaFiles.videos) {
        const base64 = await convertFileToBase64(video.file);
        mediaData.videos.push({
          name: video.name,
          type: video.type,
          size: video.size,
          data: base64
        });
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏õ‡πá‡∏ô base64
      for (const image of mediaFiles.images1) {
        const base64 = await convertFileToBase64(image.file);
        mediaData.images1.push({
          name: image.name,
          type: image.type,
          size: image.size,
          data: base64
        });
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô base64
      for (const image of mediaFiles.images2) {
        const base64 = await convertFileToBase64(image.file);
        mediaData.images2.push({
          name: image.name,
          type: image.type,
          size: image.size,
          data: base64
        });
      }

      return mediaData;
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå:", error);
      throw error;
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏∑‡πà‡∏≠
  const handleAddMessage = async () => {
    if (!selectedPage) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }
    
    if (!newMessage.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasMedia = mediaFiles.videos.length > 0 || 
                     mediaFiles.images1.length > 0 || 
                     mediaFiles.images2.length > 0;

    try {
      console.log(`üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${newMessage}" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: ${selectedPage}`);
      
      let messageData = {
        page_id: selectedPage,
        message: newMessage.trim()
      };

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∑‡πà‡∏≠
      if (hasMedia) {
        console.log("üìé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∑‡πà‡∏≠...");
        const mediaData = await prepareMediaData();
        messageData.media = mediaData;
        
        console.log("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏î‡πâ:", {
          videos: mediaData.videos.length,
          images1: mediaData.images1.length,
          images2: mediaData.images2.length
        });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏∑‡πà‡∏≠
      const savedMsg = await saveMessageToDB(selectedPage, newMessage.trim(), hasMedia ? messageData.media : null);
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, savedMsg);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô state ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∑‡πà‡∏≠
      const newMessageItem = {
        ...savedMsg,
        media: hasMedia ? messageData.media : null,
        mediaCount: {
          videos: mediaFiles.videos.length,
          images1: mediaFiles.images1.length,
          images2: mediaFiles.images2.length
        }
      };
      
      setMessages(prevMessages => [...prevMessages, newMessageItem]);
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      setNewMessage("");
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞ URL previews
      Object.values(mediaFiles).flat().forEach(file => {
        if (file.preview) {
          URL.revokeObjectURL(file.preview);
        }
      });
      
      setMediaFiles({
        videos: [],
        images1: [],
        images2: []
      });
      
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: " + error.message);
    }
  };

  const handleDeleteMessage = async (messageId) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      return;
    }

    try {
      console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ID: ${messageId}`);
      await deleteMessageFromDB(messageId);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));
      
    } catch (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const getTotalMediaCount = () => {
    return mediaFiles.videos.length + mediaFiles.images1.length + mediaFiles.images2.length;
  };

  // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const selectedPageName = pages.find(page => page.id === selectedPage)?.name || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à";

  return (
    <div className="app-container">
      {/* Sidebar */}
      <aside className="sidebar">
        <h3 className="sidebar-title">‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</h3>
        <button onClick={connectFacebook} className="BT">
          <svg width="15" height="20" viewBox="0 0 320 512" fill="#fff" className="fb-icon">
            <path d="M279.14 288l14.22-92.66h-88.91V127.91c0-25.35 12.42-50.06 52.24-50.06H293V6.26S259.5 0 225.36 0c-73.22 0-121 44.38-121 124.72v70.62H22.89V288h81.47v224h100.2V288z" />
          </svg>
        </button>
        <hr />
        <select value={selectedPage} onChange={handlePageChange} className="select-page">
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à --</option>
          {pages.map((page) => (
            <option key={page.id} value={page.id}>
              {page.name}
            </option>
          ))}
        </select>
        <Link to="/App" className="title" style={{ marginLeft: "64px" }}>‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link><br />
        <Link to="/Set_Miner" className="title" style={{ marginLeft: "50px" }}>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏∏‡∏î</Link><br />
        <a href="#" className="title" style={{ marginLeft: "53px" }}>Dashboard</a><br />
        <a href="#" className="title" style={{ marginLeft: "66px" }}>Setting</a><br />
      </aside>

      {/* Main Content */}
      <div className="message-settings-container">
        <h1>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Default</h1>
        
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
        <div className="page-info">
          <p style={{textAlign:"center"}}><strong>‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</strong> {selectedPageName}</p>  
        </div>

        {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏∑‡πà‡∏≠ */}
        <div className="media-upload-section">
          
          {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
          <div className="message-box-section">
            <div className="message-box-header">
              <span className="message-icon">üí¨</span>
              <span className="message-title">‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° </span>
              {getTotalMediaCount() > 0 && (
                <span className="media-count-badge">
                  üìé {getTotalMediaCount()} ‡πÑ‡∏ü‡∏•‡πå
                </span>
              )}
            </div>
              
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ */}
              
              <div style={{ marginBottom: "20px" , marginLeft: "10px" , marginRight: "10px"}}>
                 <div className="message-list">
                      {loading ? (
                        <p className="loading">üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...</p>
                      ) : messages.length > 0 ? (
                        messages.map((msg, index) => (
                          <div key={msg.id || index} className="message-item">
                            <div className="message-content">
                              <span className="message-text">{msg.message}</span>
                              {msg.mediaCount && (
                                <div className="message-media-info">
                                  {msg.mediaCount.videos > 0 && (
                                    <span className="media-badge video-badge">üìπ {msg.mediaCount.videos}</span>
                                  )}
                                  {msg.mediaCount.images1 > 0 && (
                                    <span className="media-badge image-badge">üñºÔ∏è {msg.mediaCount.images1}</span>
                                  )}
                                  {msg.mediaCount.images2 > 0 && (
                                    <span className="media-badge image-badge">üñºÔ∏è {msg.mediaCount.images2}</span>
                                  )}
                                </div>
                              )}
                            </div>
                            <button
                              onClick={() => handleDeleteMessage(msg.id)}
                              className="delete-button"
                              disabled={!msg.id}
                            >
                              ‡∏•‡∏ö
                            </button>
                          </div>
                        ))
                      ) : selectedPage ? (
                        <p className="no-messages">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ</p>
                      ) : (
                        <p className="no-messages">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</p>
                      )}
              </div>
            </div>
          </div>

          {/* ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ */}
          <div className="media-group">
            <div className="media-header">
              <span className="media-icon">üìπ</span>
              <span className="media-title">‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</span>
              {mediaFiles.videos.length > 0 && (
                <span className="file-count">({mediaFiles.videos.length} ‡πÑ‡∏ü‡∏•‡πå)</span>
              )}
            </div>
            <div className="media-upload-area">
              <input
                type="file"
                id="video-upload"
                accept="video/*"
                multiple
                onChange={(e) => handleFileUpload(e, 'videos')}
                style={{ display: 'none' }}
              />
              <label htmlFor="video-upload" className="upload-button">
                <span className="upload-icon">‚¨ÜÔ∏è</span>
                <span>Drop files to attach, Browse Files</span>
              </label>
              {mediaFiles.videos.length > 0 && (
                <div className="media-preview">
                  {mediaFiles.videos.map((file, index) => (
                    <div key={index} className="media-item">
                      <video src={file.preview} controls className="media-thumbnail" />
                      <div className="media-info">
                        <span className="media-name">{file.name}</span>
                        <span className="media-size">{(file.size / 1024 / 1024).toFixed(2)} MB</span>
                      </div>
                      <button 
                        onClick={() => removeMediaFile('videos', index)}
                        className="remove-media-btn"
                      >
                        ‚ùå
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 1 */}
          <div className="media-group">
            <div className="media-header">
              <span className="media-icon">üñºÔ∏è</span>
              <span className="media-title">‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 1</span>
              {mediaFiles.images1.length > 0 && (
                <span className="file-count">({mediaFiles.images1.length} ‡πÑ‡∏ü‡∏•‡πå)</span>
              )}
            </div>
            <div className="media-upload-area">
              <input
                type="file"
                id="image1-upload"
                accept="image/*"
                multiple
                onChange={(e) => handleFileUpload(e, 'images1')}
                style={{ display: 'none' }}
              />
              <label htmlFor="image1-upload" className="upload-button">
                <span className="upload-icon">‚¨ÜÔ∏è</span>
                <span>Drop files to attach, Browse Files</span>
              </label>
              {mediaFiles.images1.length > 0 && (
                <div className="media-preview">
                  {mediaFiles.images1.map((file, index) => (
                    <div key={index} className="media-item">
                      <img src={file.preview} alt={file.name} className="media-thumbnail" />
                      <div className="media-info">
                        <span className="media-name">{file.name}</span>
                        <span className="media-size">{(file.size / 1024 / 1024).toFixed(2)} MB</span>
                      </div>
                      <button 
                        onClick={() => removeMediaFile('images1', index)}
                        className="remove-media-btn"
                      >
                        ‚ùå
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà 2 */}
         
        </div>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ */}
       

        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà */}
        <div className="message-input-group">
          <textarea
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder={selectedPage ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà..." : "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô"}
            className="message-textarea"
            disabled={!selectedPage}
          />
          <div className="message-controls">
           
            <button
              onClick={handleAddMessage}
              className="add-button"
              disabled={!selectedPage || !newMessage.trim()}
            >
              {getTotalMediaCount() > 0 ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}
            </button>
          </div>
        </div>

        <Link to="/Set_Miner" className="back-button">
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        </Link>
      </div>
    </div>
  );
}

export default SetDefault;